import random
import matplotlib.pyplot as plt

def circumcircle(a, b, c):
    ax, ay = a
    bx, by = b
    cx, cy = c
    d = 2 * (ax * (by - cy) + bx * (cy - ay) + cx * (ay - by))
    ux = ((ax * ax + ay * ay) * (by - cy) + (bx * bx + by * by) * (cy - ay) + (cx * cx + cy * cy) * (ay - by)) / d
    uy = ((ax * ax + ay * ay) * (cx - bx) + (bx * bx + by * by) * (ax - cx) + (cx * cx + cy * cy) * (bx - ax)) / d
    radius = ((ax - ux) ** 2 + (ay - uy) ** 2) ** 0.5
    return (ux, uy), radius

def calculate_voronoi(points):
    delaunay = [(float('-inf'), float('-inf')), (float('inf'), float('-inf')), (0.5, float('inf'))]
    edges = []
    center_points = []

    def add_edge(edges, a, b):
        if (a, b) in edges or (b, a) in edges:
            return
        edges.append((a, b))

    def remove_edge(edges, a, b):
        if (a, b) in edges:
            edges.remove((a, b))
        elif (b, a) in edges:
            edges.remove((b, a))

    def add_triangle_edges(edges, triangle):
        a, b, c = triangle
        add_edge(edges, a, b)
        add_edge(edges, b, c)
        add_edge(edges, c, a)

    def remove_triangle_edges(edges, triangle):
        a, b, c = triangle
        remove_edge(edges, a, b)
        remove_edge(edges, b, c)
        remove_edge(edges, c, a)

    def in_circumcircle(point, triangle):
        if len(triangle) != 3:
            return False
        center, radius = circumcircle(triangle[0], triangle[1], triangle[2])
        dist = ((point[0] - center[0]) ** 2 + (point[1] - center[1]) ** 2) ** 0.5
        return dist <= radius

    for point in points:
        delaunay.append(point)
        newly_added_triangles = []
        for triangle in delaunay:
            if in_circumcircle(point, triangle):
                newly_added_triangles.append(triangle)

        polygon = [point]
        for triangle in newly_added_triangles:
            remove_triangle_edges(edges, triangle)
            a, b, c = triangle
            polygon.extend([a, b, b, c, c, a])
        polygon = list(set(polygon)) + [polygon[0]]
        for i in range(0, len(polygon)-1, 2):
            a, b = polygon[i], polygon[i + 1]
            add_edge(edges, a, b)

    for edge in edges:
        center_points.append(edge[0])
        center_points.append(edge[1])

    return center_points, edges
# Generate random points
num_points = 20
points = [(random.uniform(0, 1), random.uniform(0, 1)) for _ in range(num_points)]

# Calculate Voronoi diagram
center_points, edges = calculate_voronoi(points)

# Plotting the points and edges
plt.figure(figsize=(6, 6))
plt.scatter(*zip(*points), color='red', label='Points')

# Plotting the edges
counter = 0
for edge in edges:
    x = edge[0]
    y = edge[1]

    counter += 1
    label = str(counter)
    plt.plot(x, y, color='blue', linewidth=1, label=label)


plt.title('2D Voronoi Diagram')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()


